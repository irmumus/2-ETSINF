#BlueJ class context
comment0.target=Grafo
comment0.text=\ Clase\ abstracta\ Grafo\:\ \r\n\ \ Base\ de\ la\ jerarquia\ Grafo,\ que\ define\ el\ comportamiento\ \r\n\ \ de\ un\ grafo.\ No\ es\ una\ interfaz\ porque\ incluye\ el\ codigo\ \r\n\ \ de\ aquellas\ operaciones\ de\ un\ grafo\ que\ son\ independientes\ \r\n\ \ tanto\ de\ su\ tipo\ como\ de\ su\ implementacion.\r\n
comment1.params=
comment1.target=int\ numVertices()
comment1.text=\ Devuelve\ el\ numero\ de\ vertices\ de\ un\ grafo.\r\n\ \ @return\ int,\ numero\ de\ vertices\ de\ un\ grafo\r\n
comment10.params=v\ res
comment10.target=void\ finDelDFS(int,\ int[])
comment11.params=
comment11.target=int[]\ toArrayDFS()
comment12.params=v\ res
comment12.target=void\ toArrayDFS(int,\ int[])
comment13.params=
comment13.target=int[]\ toArrayBFS()
comment14.params=v\ res
comment14.target=void\ toArrayBFS(int,\ int[])
comment15.params=v
comment15.target=void\ caminosMinimosSinPesos(int)
comment16.params=v
comment16.target=void\ caminosBFS(int)
comment17.params=v\ w
comment17.target=librerias.estructurasDeDatos.modelos.ListaConPI\ caminoMinimoSinPesos(int,\ int)
comment18.params=w
comment18.target=librerias.estructurasDeDatos.modelos.ListaConPI\ decodificarCaminoHasta(int)
comment19.params=v\ w
comment19.target=librerias.estructurasDeDatos.modelos.ListaConPI\ caminoMinimo(int,\ int)
comment2.params=
comment2.target=int\ numAristas()
comment2.text=\ Devuelve\ el\ numero\ de\ aristas\ de\ un\ grafo.\r\n\ \ @return\ int,\ numero\ de\ aristas\ de\ un\ grafo\r\n
comment20.params=u
comment20.target=void\ dijkstra(int)
comment21.params=
comment21.target=int[]\ ordenTopologicoDFS()
comment22.params=v\ res
comment22.target=void\ ordenTopologicoDFS(int,\ int[])
comment23.params=
comment23.target=boolean\ hayCicloDFS()
comment24.params=v
comment24.target=boolean\ hayAristaHADFS(int)
comment25.params=
comment25.target=int\ numeroCC()
comment26.params=v\ n
comment26.target=java.lang.String\ verticesCercanos(int,\ int)
comment27.params=
comment27.target=int\ maxVerticesCC()
comment28.params=v
comment28.target=int\ maxVerticesCC(int)
comment29.params=
comment29.target=int\ aristasHA()
comment3.params=i\ j
comment3.target=boolean\ existeArista(int,\ int)
comment3.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n\ \ @return\ boolean,\ true\ si\ (i,j)\ esta\ y\ false\ en\ caso\ \r\n\ \ contrario\r\n
comment30.params=v
comment30.target=int\ aristasHA(int)
comment4.params=i\ j
comment4.target=double\ pesoArista(int,\ int)
comment4.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ \r\n\ \ 0\ si\ dicha\ arista\ no\ esta\ en\ el\ grafo.\r\n\ \ @return\ double,\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\r\n
comment5.params=i\ j
comment5.target=void\ insertarArista(int,\ int)
comment5.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ grafo\ \r\n\ \ no\ Ponderado.\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n
comment6.params=i\ j\ p
comment6.target=void\ insertarArista(int,\ int,\ double)
comment6.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\r\n\ \ un\ grafo\ Ponderado.\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n\ \ @param\ p,\ Peso\ de\ la\ arista\ (i,j)\r\n
comment7.params=i
comment7.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment7.text=\ Devuelve\ una\ Lista\ Con\ PI\ que\ contiene\ los\ adyacentes\r\n\ \ al\ vertice\ i\ de\ un\ grafo.\r\n\ \ @param\ i,\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\r\n\ \ @return\ ListaConPI,\ con\ los\ vertices\ adyacentes\ a\ i\r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\ Devuelve\ un\ String\ con\ cada\ uno\ de\ los\ vertices\ \r\n\ \ de\ un\ grafo\ y\ sus\ adyacentes,\ en\ orden\ de\ insercion\ \r\n\ \ @return\ String,\ que\ representa\ a\ un\ grafo\r\n
comment9.params=
comment9.target=int[]\ finDelDFS()
comment9.text=EJERCICIO\ 3\:\ DEVUELVE\ UN\ ARRAY\ CUYOS\ ELEMENTOS\ SON\r\n\ LOS\ V\u00C9RTICES\ DEL\ GRAFO\ EN\ EL\ ORDEN\ QUE\ FINALIZA\ SU\ DFS\r\n
numComments=31
