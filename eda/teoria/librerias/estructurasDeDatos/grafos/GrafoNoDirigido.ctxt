#BlueJ class context
comment0.target=GrafoNoDirigido
comment0.text=\ Clase\ GrafoNoDirigido\:\ \r\n\ \ implementacion\ de\ un\ grafo\ No\ Dirigido\ (Ponderado\ o\ no)\ \r\n\ \ mediante\ Listas\ de\ Adyacencia\:\r\n\ \ un\ grafo\ No\ Dirigido\ ES\ UN\ Grafo\ Dirigido\ tal\ que\ \r\n\ \ si\ la\ Arista\ (i,\ j)\ esta\ en\ la\ Lista\ de\ Adyacencia\ de\ i\ \r\n\ \ entonces\ tambien\ esta\ la\ Arista\ (j,\ i)\ en\ la\ Lista\ de\ \r\n\ \ Adyacencia\ de\ j\r\n
comment1.params=numVertices
comment1.target=GrafoNoDirigido(int)
comment1.text=\ Construye\ un\ grafo\ No\ Dirigido\ vacio\ con\ numVertices.\ \r\n\ \ @param\ numVertices,\ Numero\ de\ vertices\ del\ grafo\ vacio\r\n
comment10.params=
comment10.target=int\ getSumideroU()
comment10.text=EJERCICIO\ 2C\:\ DEVOLVER\ EL\ PRIMER\ SUMIDERO\ UNIVERSAL\ O\ -1\r\n\ SUMIDERO\ UNIVERSAL\ ->\ VERTICE\ CON\ GRADO\ \r\n\ DE\ ENTRADA\ \=\ |V|-1\ Y\ GRADO\ SALIDA\ \=\ 0\r\n
comment11.params=
comment11.target=int\ getFuenteU()
comment11.text=EJERCICIO\ 2D\:\ DEVOLVER\ LA\ 1\u00AA\ FUENTE\ UNIVERSAL\ O\ -1\r\n\ FUENTE\ UNIVERSAL\ ->\ VERTICE\ CON\ GRADO\ DE\ ENTRADA\ \=\ 0\r\n\ Y\ GRADO\ DE\ SALIDA\ \=\ |V|-1\r\n
comment12.params=
comment12.target=boolean\ esCompleto()
comment12.text=EJERCICIO\ 2E\:\ DECIR\ SI\ UN\ GRAFO\ ES\ O\ NO\ COMPLETO\r\n\ GRAFO\ COMPLETO->GRAFO\ SIMPLE\ DONDE\ CADA\ PAR\ DE\ V\u00C9RTICES\r\n\ DISTINTOS\ EST\u00C1N\ CONECTADOS\ POR\ UNA\ \u00DANICA\ ARISTA\r\n
comment13.params=
comment13.target=boolean\ esConexo()
comment13.text=EJERCICIO\ 4\:\ COMPROBAR\ SI\ UN\ GRAFO\ ES\ CONEXO
comment14.params=v
comment14.target=void\ recorridoDFS(int)
comment15.params=
comment15.target=java.lang.String\ toStringCC()
comment16.params=v
comment16.target=java.lang.String\ toStringCC(int)
comment17.params=
comment17.target=java.lang.String[]\ spanningTree()
comment18.params=v\ sTree
comment18.target=void\ spanningTree(int,\ java.lang.String[])
comment2.params=i\ j
comment2.target=void\ insertarArista(int,\ int)
comment2.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ \r\n\ \ en\ un\ grafo\ No\ Dirigido\ y\ No\ Ponderado;\ \r\n\ \ por\ tanto,\ tambien\ inserta\ la\ arista\ (j,\ i).\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n
comment3.params=i\ j\ p
comment3.target=void\ insertarArista(int,\ int,\ int)
comment3.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ \r\n\ \ en\ un\ grafo\ No\ Dirigido\ y\ Ponderado;\ \r\n\ \ por\ tanto,\ tambien\ inserta\ la\ arista\ (j,\ i)\ de\ peso\ p.\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n\ \ @param\ p,\ Peso\ de\ (i,\ j)\r\n
comment4.params=i
comment4.target=int\ gradoSalida(int)
comment4.text=EJEMPLO\ 1\:\ GRADO\ DE\ SALIDA\ DE\ UN\ V\u00C9RTICE
comment5.params=
comment5.target=int\ gradoSalida()
comment5.text=EJEMPLO\ 2\:\ GRADO\ DE\ SALIDA\ DE\ UN\ GRAFO\ (V\u00C9RTICE\ CON\ \r\nMAYOR\ GRADO)
comment6.params=i
comment6.target=int\ gradoEntrada(int)
comment6.text=EJEMPLO\ 3\:\ GRADO\ DE\ ENTRADA\ DE\ UN\ V\u00C9RTICE
comment7.params=
comment7.target=int\ gradoEntrada()
comment7.text=EJEMPLO\ 4\:\ GRADO\ DE\ ENTRADA\ DE\ UN\ GRAFO
comment8.params=
comment8.target=int\ getVerticeReceptivo()
comment8.text=EJERCICIO\ 2A\:\ DEVOLVER\ EL\ PRIER\ V\u00C9RTICE\ CON\ GRADO\ DE\ \r\n\ ENTRADA\ |V|-1\ Y\ SI\ NO\ EXISTE\ DEVOLVER\ -1\r\n
comment9.params=i
comment9.target=boolean\ esSumidero(int)
comment9.text=EJERCICIO\ 2B\:\ COMPROBAR\ SI\ EL\ V\u00C9RTICE\ DE\ UN\ GRADO\ \r\n\ ES\ SUMIDERO\r\n\ SUMIDERO\ ->\ V\u00C9RTICE\ CON\ GRADO\ DE\ ENTRADA\ >\ 0\ \ Y\r\n\ GRADO\ DE\ SALIDA\ \=\ 0\r\n
numComments=19
