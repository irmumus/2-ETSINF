#BlueJ class context
comment0.target=GrafoDirigido
comment0.text=\ Clase\ GrafoDirigido\:\ \r\n\ \ implementacion\ de\ un\ grafo\ Dirigido\ (Ponderado\ o\ no)\ \r\n\ \ mediante\ Listas\ de\ Adyacencia.\r\n
comment1.params=numVertices
comment1.target=GrafoDirigido(int)
comment1.text=\ Construye\ un\ grafo\ Dirigido\ vacio\ con\ numVertices.\ \r\n\ \ @param\ numVertices,\ Numero\ de\ vertices\ del\ grafo\ vacio\r\n
comment10.params=
comment10.target=int\ gradoSalida()
comment10.text=EJEMPLO\ 2\:\ GRADO\ DE\ SALIDA\ DE\ UN\ GRAFO\ \r\n\ (V\u00C9RTICE\ CON\ MAYOR\ GRADO)\r\n
comment11.params=i
comment11.target=int\ gradoEntrada(int)
comment11.text=EJEMPLO\ 3\:\ GRADO\ DE\ ENTRADA\ DE\ UN\ V\u00C9RTICE
comment12.params=
comment12.target=int\ gradoEntrada()
comment12.text=EJEMPLO\ 4\:\ GRADO\ DE\ ENTRADA\ DE\ UN\ GRAFO
comment13.params=
comment13.target=int\ grado()
comment13.text=EJERCICIO\ 1A\:\ DEVUELVE\ EL\ GRADO\ DEL\ GRAFO\ (VER\ DIBUJO)
comment14.params=
comment14.target=int[]\ getArrayGrados()
comment15.params=v
comment15.target=int\ maximo(int[])
comment16.params=
comment16.target=double\ aristaMayorPeso()
comment16.text=EJERCICIO\ 1B\:\ ARISTA\ DE\ MAYOR\ PESO,\ PESO\ M\u00C1XIMO\ \r\n\ DE\ LAS\ ARISTAS\ DE\ UN\ GRAFO\r\n
comment17.params=
comment17.target=boolean\ esRegular()
comment17.text=EJERCICIO\ 1C\:\ DEVOLVER\ SI\ EL\ GRAFO\ ES\ REGULAR,\ ES\ DECIR,\ \ \r\n\ TODOS\ LOS\ V\u00C9RTICES\ TIENEN\ EL\ MISMO\ GRADO\r\n
comment18.params=
comment18.target=int\ getVerticeReceptivo()
comment18.text=EJERCICIO\ 2A\:\ DEVOLVER\ EL\ PRIER\ V\u00C9RTICE\ CON\ \r\n\ GRADO\ DE\ ENTRADA\ |V|-1\r\n\ SI\ NO\ EXISTE\ DEVOLVER\ -1\r\n
comment19.params=
comment19.target=int[]\ getArrayGradosEntrada()
comment2.params=
comment2.target=int\ numVertices()
comment2.text=\ Devuelve\ el\ numero\ de\ vertices\ de\ un\ grafo.\ \r\n\ \ @return\ int,\ Numero\ de\ vertices\ de\ un\ grafo\r\n
comment20.params=i
comment20.target=boolean\ esSumidero(int)
comment20.text=EJERCICIO\ 2B\:\ COMPROBAR\ SI\ EL\ V\u00C9RTICE\ DE\ UN\ GRADO\ ES\ \r\n\ SUMIDERO\r\n\ SUMIDERO\ ->\ V\u00C9RTICE\ CON\ GRADO\ DE\ ENTRADA\ >\ 0\ \ Y\ \r\n\ GRADO\ DE\ SALIDA\ \=\ 0\r\n
comment21.params=
comment21.target=int\ getSumideroU()
comment21.text=EJERCICIO\ 2C\:\ DEVOLVER\ EL\ PRIMER\ SUMIDERO\ UNIVERSAL\ O\ -1\r\n\ SUMIDERO\ UNIVERSAL\ ->\ VERTICE\ CON\ GRADO\ \r\n\ DE\ ENTRADA\ \=\ |V|-1\ Y\ GRADO\ SALIDA\ \=\ 0\r\n
comment22.params=
comment22.target=int\ getFuenteU()
comment22.text=EJERCICIO\ 2D\:\ DEVOLVER\ LA\ 1\u00AA\ FUENTE\ UNIVERSAL\ O\ -1\r\n\ FUENTE\ UNIVERSAL\ ->\ VERTICE\ CON\ GRADO\ DE\ ENTRADA\ \=\ 0\r\n\ Y\ GRADO\ DE\ SALIDA\ \=\ |V|-1\r\n
comment23.params=
comment23.target=boolean\ esCompleto()
comment23.text=EJERCICIO\ 2E\:\ DECIR\ SI\ UN\ GRAFO\ ES\ O\ NO\ COMPLETO\r\n\ GRAFO\ COMPLETO->GRAFO\ SIMPLE\ DONDE\ CADA\ PAR\ DE\ V\u00C9RTICES\r\n\ DISTINTOS\ EST\u00C1N\ CONECTADOS\ POR\ UNA\ \u00DANICA\ ARISTA\r\n
comment3.params=
comment3.target=int\ numAristas()
comment3.text=\ Devuelve\ el\ numero\ de\ aristas\ de\ un\ grafo.\r\n\ \ @return\ int,\ Numero\ de\ aristas\ de\ un\ grafo\r\n
comment4.params=i\ j
comment4.target=boolean\ existeArista(int,\ int)
comment4.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n\ \ @return\ boolean,\ true\ si\ (i,j)\ esta\ y\ false\ \r\n\ \ en\ caso\ contrario\r\n
comment5.params=i\ j
comment5.target=double\ pesoArista(int,\ int)
comment5.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ \r\n\ \ 0\ si\ dicha\ arista\ no\ esta\ en\ el\ grafo.\r\n\ \ @return\ double,\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\r\n
comment6.params=i\ j
comment6.target=void\ insertarArista(int,\ int)
comment6.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ \r\n\ \ grafo\ no\ Ponderado\ \r\n\ \ (al\ principio\ de\ la\ Lista\ de\ adyacentes\ a\ i).\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n
comment7.params=i\ j\ p
comment7.target=void\ insertarArista(int,\ int,\ double)
comment7.text=\ Si\ no\ est\u00E1,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ \r\n\ \ en\ un\ grafo\ Ponderado\ \r\n\ \ (al\ principio\ de\ la\ Lista\ de\ adyacentes\ a\ i).\r\n\ \ @param\ i,\ Vertice\ origen\r\n\ \ @param\ j,\ Vertice\ destino\r\n\ \ @param\ p,\ Peso\ de\ (i,\ j)\r\n
comment8.params=i
comment8.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment8.text=\ Devuelve\ una\ Lista\ Con\ PI\ que\ contiene\ los\ adyacentes\ \r\n\ al\ vertice\ i\ de\ un\ grafo.\r\n\ \ @param\ i,\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\r\n\ \ @return\ ListaConPI,\ con\ los\ vertices\ adyacentes\ a\ i\r\n
comment9.params=i
comment9.target=int\ gradoSalida(int)
comment9.text=EJEMPLO\ 1\:\ GRADO\ DE\ SALIDA\ DE\ UN\ V\u00C9RTICE
numComments=24
