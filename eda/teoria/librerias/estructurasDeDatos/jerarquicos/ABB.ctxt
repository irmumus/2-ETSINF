#BlueJ class context
comment0.target=ABB
comment0.text=\ Clase\ ABB<E>\ que,\ en\ base\ a\ la\ identificacion\ AB-Nodo,\ representa\ un\r\n\ \ Arbol\ Binario\ mediante\ un\ enlace\ a\ su\ Nodo\ Raiz.\ Para\ poder\ utilizarla\ \r\n\ \ como\ Implementacion\ eficiente\ de\ Cola\ de\ Prioridad\ y\ Map\ Ordenado,\ \r\n\ \ sus\ caracteristicas\ son\ las\ siguientes\:\ \r\n\ \ 1.-\ El\ tipo\ de\ sus\ Elementos\ es\ E\ extends\ Comparable<E>\r\n\ \ 2.-\ Como\ unico\ ATRIBUTO,\ protected\ para\ la\ Herencia,\ \r\n\ \ \ \ \ \ TIENE\ UN\ NodoABB<E>\ raiz\r\n\ \ \ \ \ \ OJO\:\ talla\ NO\ es\ un\ atributo\ de\ la\ clase,\ sino\ de\ sus\ Nodos\r\n\ \ \ \ \ \ \ \ \ \ \ Precisamente\ por\ ello,\ esta\ clase\ implementa\ un\ ABB\ con\ Rango\ \r\n\ \ 3.-\ Tiene\ un\ unico\ constructor,\ el\ de\ ABB\ vacio,\ sin\ parametros\r\n\ \ 4.-\ Todos\ sus\ metodos\ publicos\ son\ muy\ simples\:\ basicamente,\ contienen\r\n\ \ \ \ \ \ una\ invocacion\ al\ metodo\ homonimo\ recursivo\ sobre\ su\ Nodo\ Raiz\ \r\n\ \ \ \ \ \ (son\ metodos\ guia\ o\ lanzadera)\r\n\ \ \ \ \ \ Las\ caracteristicas\ de\ cualquiera\ de\ estos\ metodos\ recursivos\ son\:\r\n\ \ \ \ \ \ 4.1.\ Su\ modificador\ de\ visibilidad\ es\ protected\ y\ no\ private;\ \r\n\ \ \ \ \ \ 4.2.\ Tiene,\ al\ menos,\ como\ PARAMETRO\ FORMAL\ el\ Nodo\ actual\ sobre\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ el\ que\ se\ aplica,\ PERO\ NO\ ES\ ESTATICO;\ al\ invocar\ su\ ejecucion\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ desde\ el\ metodo\ publico,\ en\ su\ llamada\ mas\ alta,\ el\ valor\ del\ \r\n\ \ \ \ \ \ \ \ \ \ \ Nodo\ actual\ es\ siempre\ this.raiz\r\n\ \ \ \ \ \ 4.3.\ En\ general,\ devuelven\ el\ Nodo\ del\ ABB\ resultado\ de\ su\ aplicacion;\r\n\ \ \ \ \ \ \ \ \ \ \ Por\ ejemplo\:\ recuperar(e)\ devuelve\ el\ Nodo\ de\ actual\ que\ contiene\r\n\ \ \ \ \ \ \ \ \ \ \ a\ e,\ el\ elemento\ a\ recuperar;\ insertar(e)\ devuelve\ el\ Nodo\ Raiz\r\n\ \ \ \ \ \ \ \ \ \ \ del\ ABB\ que\ se\ obtiene\ al\ insertar\ el\ elemento\ e\ en\ el\ Nodo\ actual\r\n\ \ \ \ \ \ \ \ \ \ \ \r\n\ @param\ <E>,\ tipo\ de\ los\ elementos\ del\ ABB,\ Comparable\ por\ definicion\ \r\n\r\n
comment1.params=
comment1.target=ABB()
comment1.text=crea\ un\ ABB\ vacio,\ con\ 0\ elementos
comment10.params=e\ actual
comment10.target=NodoABB\ insertar(java.lang.Comparable,\ NodoABB)
comment11.params=e
comment11.target=void\ eliminar(java.lang.Comparable)
comment11.text=elimina\ el\ Dato\ e\ de\ un\ ABB
comment12.params=e\ actual
comment12.target=NodoABB\ eliminar(java.lang.Comparable,\ NodoABB)
comment13.params=
comment13.target=java.lang.Comparable\ recuperarMin()
comment13.text=SII\ \!esVacio()\:\ devuelve\ el\ minimo\ de\ un\ ABB
comment14.params=actual
comment14.target=NodoABB\ recuperarMin(NodoABB)
comment15.params=
comment15.target=java.lang.Comparable\ recuperarMax()
comment16.params=actual
comment16.target=NodoABB\ recuperarMax(NodoABB)
comment17.params=
comment17.target=java.lang.Comparable\ eliminarMin()
comment17.text=SII\ \!esVacio()\:\ elimina\ y\ devuelve\ el\ minimo\ de\ un\ ABB
comment18.params=actual
comment18.target=NodoABB\ eliminarMin(NodoABB)
comment19.params=
comment19.target=java.lang.Comparable\ eliminarMax()
comment19.text=SII\ \!esVacio()\:\ elimina\ y\ devuelve\ el\ m\u00E1ximo\ de\ un\ ABB
comment2.params=
comment2.target=boolean\ esVacio()
comment2.text=comprueba\ si\ un\ ABB\ esta\ vacio
comment20.params=actual
comment20.target=NodoABB\ eliminarMax(NodoABB)
comment21.params=e
comment21.target=java.lang.Comparable\ sucesor(java.lang.Comparable)
comment21.text=SII\ \!esVacio()\:\ devuelve\ el\ sucesor\ de\ e\ en\ un\ ABB,\ null\ si\ no\ esta
comment22.params=e\ actual
comment22.target=NodoABB\ sucesor(java.lang.Comparable,\ NodoABB)
comment23.params=k
comment23.target=java.lang.Comparable\ seleccionar(int)
comment23.text=\ SII\ \!esVacio()\ AND\ 1\ <\=\ k\ <\=\ talla()\:\ \ \r\ndevuelve\ el\ k-esimo\ minimo\ de\ un\ ABB
comment24.params=k\ actual
comment24.target=NodoABB\ seleccionar(int,\ NodoABB)
comment25.params=e
comment25.target=java.lang.Comparable\ recuperarI(java.lang.Comparable)
comment25.text=metodo\ recuperar,\ version\ iterativa
comment26.params=actual
comment26.target=NodoABB\ eliminarMinI(NodoABB)
comment26.text=metodo\ eliminarMin,\ version\ iterativa
comment27.params=actual\ nodoMin
comment27.target=NodoABB\ eliminarMin(NodoABB,\ NodoABB)
comment27.text=metodo\ eliminarMin,\ segunda\ version\ iterativa
comment28.params=
comment28.target=java.lang.Comparable\ eliminarMin2()
comment29.params=
comment29.target=java.lang.String\ toStringPostOrden()
comment29.text=devuelve\ un\ String\ con\ los\ Datos\ de\ un\ ABB\ en\ Post-Orden
comment3.params=
comment3.target=int\ altura()
comment3.text=devuelve\ la\ altura\ de\ un\ ABB,\ -1\ si\ esta\ vacio\ *
comment30.params=actual\ res
comment30.target=void\ toStringPostOrden(NodoABB,\ java.lang.StringBuilder)
comment31.params=
comment31.target=java.lang.String\ toStringPreOrden()
comment31.text=devuelve\ un\ String\ con\ los\ Datos\ de\ un\ ABB\ en\ Pre-Orden
comment32.params=actual\ res
comment32.target=void\ toStringPreOrden(NodoABB,\ java.lang.StringBuilder)
comment33.params=
comment33.target=java.lang.String\ toStringInOrden()
comment33.text=devuelve\ un\ String\ con\ los\ Datos\ de\ un\ ABB\ en\ In-Orden
comment34.params=actual\ res
comment34.target=void\ toStringInOrden(NodoABB,\ java.lang.StringBuilder)
comment35.params=
comment35.target=java.lang.String\ toStringPorNiveles()
comment35.text=devuelve\ un\ String\ con\ los\ Datos\ de\ un\ ABB\ ordenados\ Por\ Niveles
comment36.params=e
comment36.target=int\ enQueNivel(java.lang.Comparable)
comment36.text=EJERCICIO5\:\ devuelve\ el\ nivel\ en\ el\ que\ se\ encuentra\ la\ primera\ \r\n\ aparicion\ en\ Pre-Orden\ de\ e\ en\ un\ ABB\ equilibrado\ o\ -1\r\n
comment37.params=e\ actual\ nivAct
comment37.target=int\ enQueNivel(java.lang.Comparable,\ NodoABB,\ int)
comment38.params=e\ actual
comment38.target=int\ contarMayoresQue(java.lang.Comparable,\ NodoABB)
comment38.text=EJERCICIO6\:\ devolver\ el\ numero\ de\ elementos\ de\ un\ Nodo\ de\ \r\n\ un\ ABB\ equilibrdo\ que\ son\ mayores\ que\ uno\ dado\ e\r\n
comment39.params=
comment39.target=librerias.estructurasDeDatos.modelos.ListaConPI\ toListaConPI()
comment39.text=EJERCICIO7\:\ devolver\ una\ lista\ con\ PI\ con\ los\ datos\ del\ ABB\r\n\ ordenados\ ascendentemente\ (In-Orden)\r\n
comment4.params=actual
comment4.target=int\ altura(NodoABB)
comment40.params=actual\ l
comment40.target=void\ toListaConPI(NodoABB,\ librerias.estructurasDeDatos.modelos.ListaConPI)
comment41.params=k
comment41.target=java.lang.String\ datosEnNivel(int)
comment41.text=EJERCICIO\ 9\:\ Devolver\ un\ String\ con\ los\ datos\ del\ \r\n\ nivel\ k\ de\ un\ ABB\r\n
comment42.params=k\ actual\ nivAct
comment42.target=java.lang.String\ datosEnNivel(int,\ NodoABB,\ int)
comment43.params=
comment43.target=int\ alturaDeEquilibrado()
comment43.text=EJERCICIO10\:Devuelve\ la\ altura\ de\ un\ ABB\ si\ es\ equilibrado\r\n\ o\ lance\ NoSuchElementException\ tan\ pronto\ encuentre\ un7\r\n\ nodo\ que\ incumple\ la\ condici\u00F3n\ de\ equilibrio\r\n
comment44.params=actual
comment44.target=int\ alturaDeEquilibrado(NodoABB)
comment45.params=e\ actual
comment45.target=NodoABB\ predecesor(java.lang.Comparable,\ NodoABB)
comment46.params=e
comment46.target=java.lang.Comparable\ predecesor(java.lang.Comparable)
comment47.params=e
comment47.target=java.lang.Comparable\ padreDe(java.lang.Comparable)
comment47.text=EJERCICIO11\:\ Dado\ un\ dato\ e\ devolver\ el\ dato\ en\ el\ nodo\ padre\r\n\ del\ que\ contiene\ a\ e\ o\ null\ si\ no\ est\u00E1\ en\ el\ ABB\ o\ no\r\n\ tiene\ padre\r\n
comment48.params=n\ e
comment48.target=java.lang.Comparable\ padreDe(NodoABB,\ java.lang.Comparable)
comment49.params=e
comment49.target=java.lang.Comparable\ hermanoDe(java.lang.Comparable)
comment5.params=
comment5.target=int\ talla()
comment5.text=devuelve\ el\ tamanyo\ de\ un\ ABB,\ o\ numero\ de\ Nodos\ que\ lo\ componen
comment50.params=n\ e
comment50.target=java.lang.Comparable\ hermanoDe(NodoABB,\ java.lang.Comparable)
comment6.params=actual
comment6.target=int\ talla(NodoABB)
comment7.params=e
comment7.target=java.lang.Comparable\ recuperar(java.lang.Comparable)
comment7.text=\ devuelve\ la\ primera\ aparicion\ en\ Pre-Orden\ de\ e\ en\ un\ ABB,\ \r\nnull\ si\ e\ no\ es\ un\ Dato\ del\ ABB
comment8.params=e\ actual
comment8.target=NodoABB\ recuperar(java.lang.Comparable,\ NodoABB)
comment9.params=e
comment9.target=void\ insertar(java.lang.Comparable)
comment9.text=\ actualiza\ el\ Dato\ e\ de\ un\ ABB\:\ si\ e\ no\ esta\ en\ el\ ABB\ lo\ inserta\ \ \r\ny\ si\ esta\ lo\ sobrescribe
numComments=51
